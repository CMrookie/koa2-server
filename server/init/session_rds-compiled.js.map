{"version":3,"sources":["session_rds.js"],"names":[],"mappings":"AAAA;;;;AAKA,MAAM,UAAU,OAAO,MAAP,CAAc,KAA9B;AACA,MAAM,aAAa,QAAQ,WAAR,CAAnB;AACA,MAAM,SAAS,KAAK,EAAL,GAAU,IAAV,GAAiB,IAAhC;;AAEA,QAAQ,OAAR,GAAkB;AACd,WAAO,WAAW;AACd,cAAM,QAAQ,IADA;AAEd,cAAM,QAAQ,IAFA;AAGd,YAAI,QAAQ,EAHE;AAId,oCAA2B;AAJb,KAAX,CADO;AAuBd,YAAQ,QAAO;AACX,gBAAQ,IAAI,OAAJ,CAAY,IAAZ,GAAmB,MAAnB,GAA4B,CADzB;AAEX,gBAAQ;AAFG,KAAP;AAvBM,CAAlB","file":"session_rds-compiled.js","sourcesContent":["/**\n * Created by yujintang on 2017/2/7.\n */\n \n \nconst cfg_rds = global.config.redis;\nconst redisStore = require('koa-redis');\nconst maxAge = 30 * 24 * 3600 * 1000;\n\nexports.opt_rds = {\n    store: redisStore({\n        host: cfg_rds.host,\n        port: cfg_rds.port,\n        db: cfg_rds.db,\n        retry_unfulfilled_commands:true,\n        // retry_strategy: function (options) {\n        //     if (options.error && options.error.code === 'ECONNREFUSED') {\n        //         // End reconnecting on a specific error and flush all commands with a individual error\n        //         return new Error('The server refused the connection');\n        //     }\n        //     if (options.total_retry_time > 1000 * 60 * 60) {\n        //         // End reconnecting after a specific timeout and flush all commands with a individual error\n        //         return new Error('Retry time exhausted');\n        //     }\n        //     if (options.times_connected > 10) {\n        //         // End reconnecting with built in error\n        //         return undefined;\n        //     }\n        //     // reconnect after\n        //     return Math.min(options.attempt * 100, 3000);\n        // }\n    }),\n    cookie: ctx =>({\n        maxAge: ctx.session.user ? maxAge : 0,\n        signed: true\n    })\n};"]}